<launch>
    <!-- Launch file of Stingray for real AUV -->


    <!-- ARGS -->


    <!-- COMMON -->
    <!-- Settings for "output" parameter of nodes -->
    <arg name="ros_output" default="screen" />
    <!-- Debug mode. Enabled output images publishing after object detection -->
    <arg name="debug" default="true" />
    <!-- Enables connection with simulator -->
    <arg name="simulation" default="false" />

    <!-- VISION -->
    <!-- Enables raw video recording -->
    <arg name="record_raw" default="false" />
    <!-- Enables output video recording -->
    <arg name="record_output" default="false" />
    <!-- Directory where to save videos -->
    <arg name="record_dir" default="$(env HOME)/stingray_video_records/" />
    <!-- Enables video streaming -->
    <arg name="stream" default="false" />
    <!-- Enables video from file -->
    <arg name="file_cam" default="false" />
    <!-- Enables connection with hardware -->
    <arg name="hardware_connection" default="true" />
    <!-- Package name with weights -->
    <arg name="weights_pkg_name" default="stingray_object_detection" />

    <!-- QR TRIGGER -->
    <!-- Package name with launch files -->
    <arg name="launch_pkg_name" default="stingray_startup" />
    <!-- Filename pattern -->
    <arg name="name_pattern" default="stingray_qr_" />
    <!-- Enable launch with qr codes -->
    <arg name="qr_launch" default="false" />

    <!-- NODES-->

    <!-- SIMULATION MODE -->
    <group if="$(arg simulation)">
        <!-- Connection with simulator -->
        <node pkg="stingray_gazebo_communication" name="gazebo_bridge" type="gazebo_bridge" output="$(arg ros_output)" respawn="true" />
    </group>

    <!-- REAL VEHICLE MODE -->
    <group unless="$(arg simulation)">
        <!-- Connection with real vehicle -->
        <group if="$(arg hardware_connection)">
            <node pkg="nodelet" type="nodelet" name="standalone_nodelet" args="manager" output="$(arg ros_output)" respawn="true" />
            <node pkg="nodelet" type="nodelet" name="uart_driver" args="load stingray_communication/uart_driver standalone_nodelet" output="$(arg ros_output)" respawn="true" />
            <node pkg="nodelet" type="nodelet" name="hardware_bridge" args="load stingray_communication/hardware_bridge standalone_nodelet" output="$(arg ros_output)" respawn="true" />
        </group>
    </group>

    <!-- Movement nodes -->
    <node pkg="stingray_movement" type="basic_movement" name="basic_movement" output="$(arg ros_output)" respawn="true" />
    <node pkg="stingray_movement" type="movement_patterns" name="movement_patterns" output="$(arg ros_output)" respawn="true" />


    <!-- Vision nodes -->
    <include file="$(find stingray_startup)/launch/vision.launch">
        <arg name="ros_output" value="$(arg ros_output)" />
        <arg name="real_cam" value="true" unless="$(arg simulation)" />
        <arg name="simulation_cam" value="$(arg simulation)" />
        <arg name="file_cam" value="$(arg file_cam)" />
        <arg name="debug" value="$(arg debug)" />
        <arg name="record_raw" value="$(arg record_raw)" />
        <arg name="record_output" value="$(arg record_output)" />
        <arg name="record_dir" value="$(arg record_dir)" />
        <arg name="stream" value="$(arg stream)" />
        <arg name="weights_pkg_name" value="$(arg weights_pkg_name)" />
        <arg name="qr_launch" value="$(arg qr_launch)" />
    </include>

    <group if="$(arg qr_launch)">
        <!-- Qr code launcher -->
        <node pkg="stingray_startup" type="qr_trigger.py" name="qr_trigger" output="screen">
            <param name="launch_pkg_name" value="$(arg launch_pkg_name)" />
            <param name="name_pattern" value="$(arg name_pattern)" />
        </node>
    </group>
</launch>