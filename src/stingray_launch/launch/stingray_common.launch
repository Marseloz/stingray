<launch>

    <!-- Basic launch file of Stingray platform -->

    <!-- Settings for "output" parameter of nodes -->
    <arg name="ros_output" default="screen" />

    <!-- For launching in simulator add a "simulation:=true" parameter in command line-->
    <arg name="simulation" default="false" />

    <!-- Enables connection with hardware platform -->
    <arg name="hardware_connection" default="true" />

    <!-- UART settings -->
    <arg name="uart_device" default="/dev/ttyS0" />
    <arg name="uart_baudrate" default="57600" />
    <arg name="uart_data_bytes" default="8" />
    <!-- Available parity values: none, even, odd -->
    <arg name="uart_parity" default="none" />
    <arg name="uart_stop_bits" default="1" />

    <!-- Coefficient for transforming velocity value from range 0.0 to 1.0 to real vehicle range -->
    <arg name="velocity_coefficient" default="20000.0" />

    <!-- Delay after initialization that is used to put vehicle into the pool, in milliseconds -->
    <arg name="delay_after_init" default="50000" />

    <!-- Missions FSM module -->
    <arg name="missions_module" default="" />
    <!-- Missions FSM class -->
    <arg name="missions_class"  default="" />

    <!-- Enables missions -->
    <arg name="missions_enabled" default="false" />

    <!-- FSM visualization using SMACH viewer -->
    <arg name="fsm_introspection" default="false" />

    <!-- Connection with real vehicle -->
    <group unless="$(arg simulation)">
	    <node pkg="nodelet" type="nodelet" name="standalone_nodelet"  args="manager" output="$(arg ros_output)" respawn="true"/>
        <group if="$(arg hardware_connection)">
	        <node pkg="nodelet" type="nodelet" name="uart_driver" args="load stingray_drivers/uart_driver standalone_nodelet" output="$(arg ros_output)" respawn="true">
                <param name="device" value="$(arg uart_device)" />
                <param name="baudrate" value="$(arg uart_baudrate)" />
                <param name="data_bytes" value="$(arg uart_data_bytes)" />
                <param name="parity" value="$(arg uart_parity)" />
                <param name="stop_bits" value="$(arg uart_stop_bits)" />
            </node>
        </group>
        <node pkg="nodelet" type="nodelet" name="hardware_bridge" args="load stingray_drivers/hardware_bridge standalone_nodelet" output="$(arg ros_output)" respawn="true"/>
    </group>

    <!-- Connection with simulator -->
    <group if="$(arg simulation)">
        <node pkg="stingray_drivers" name="gazebo_bridge" type="gazebo_bridge" output="$(arg ros_output)" respawn="true" />
        <node pkg="stingray_pilot" name="stingray_pilot" type="gazebo_test_module.py" output="$(arg ros_output)" respawn="true" respawn_delay="120"/>
        <node pkg="stingray_steering_lib" name="stingray_steerer" type="Steerer" output="$(arg ros_output)" respawn="true"/>
    </group>

    <!-- Movement nodes, real vehicle -->
    <group unless="$(arg simulation)">
        <node pkg="stingray_movement" type="basic_movement" name="basic_movement" output="$(arg ros_output)" respawn="true">
            <param name="velocity_coefficient" value="$(arg velocity_coefficient)" />
        </node>
        <node pkg="stingray_movement" type="movement_patterns" name="movement_patterns" output="$(arg ros_output)" respawn="true">
            <param name="velocity_coefficient" value="$(arg velocity_coefficient)" />
        </node>
    </group>

    <!-- Movement nodes, simulator -->
    <group if="$(arg simulation)">
        <node pkg="stingray_movement" type="basic_movement" name="basic_movement" output="$(arg ros_output)" respawn="true">
            <param name="velocity_coefficient" value="4.3" />
        </node>
        <node pkg="stingray_movement" type="movement_patterns" name="movement_patterns" output="$(arg ros_output)" respawn="true">
            <param name="velocity_coefficient" value="4.3" />
        </node>
    </group>

    <group if="$(arg missions_enabled)">
        <!-- Top-level control FSM -->
        <node pkg="stingray_fsm" type="control_fsm_node.py" name="control_fsm" output="$(arg ros_output)" respawn="true">
            <param name="missions_module" value="$(arg missions_module)" />
            <param name="missions_class" value="$(arg missions_class)" />
            <param name="delay_after_init" value="$(arg delay_after_init)" />
            <param name="introspection" value="$(arg fsm_introspection)" />
        </node>
    </group>

</launch>
