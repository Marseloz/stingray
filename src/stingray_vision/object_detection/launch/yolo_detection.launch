<!--
    This .
-->
<launch>


    <!-- ARGUMENTS -->


    <!-- Defines FPS -->
    <arg name="fps" default="25" />
    <!-- Enables video streaming -->
    <arg name="stream" default="false" />
    <!-- Enables video recording -->
    <arg name="record" default="false" />
    <!-- True to enable camera-->
    <!-- False to enable videofile -->
    <arg name="cameras" default="false" />
    <!-- Providing video from simulation -->
    <arg name="simulation" default="false" />
    <arg name="front_camera_topic" default="/stereo/camera/left/image_raw" />
    <!-- Providing video from file -->
    <arg name="file" default="false" />
    <!-- Path example /home/vladushked/Documents/hydro/dnn_gate_detector/run_detection_scripts/video/2.mp4 -->
    <arg name="videofile_path" default="path/to/your/videofile" />
    <!-- Defines device that will be used as camera -->
    <!-- < arg name="device_front" default="/dev/v4l/by-path/platform-3530000.xhci-usb-0:1:1.0-video-index0"> -->
    <!-- < arg name="device_bottom" default="/dev/v4l/by-path/platform-3530000.xhci-usb-0:2:1.0-video-index0"> -->
    <arg name="device_front" default="/dev/video0" />
    <arg name="device_bottom" default="/dev/video2" />
    <!-- Package name with your dnn weights -->
    <arg name="dnn_weights_pkg" default="object_detection" />
    <!-- DNN input image size: X Y -->
    <arg name="resize_input_to" default="300 300" />


    <!-- NODES -->

    <group if="$(arg simulation)">
        <!-- Object detector node -->
        <!-- output objects topic *node_name*/objects -->
        <!-- output image topic *node_name*/image -->
        <node name="yolo_detector" pkg="object_detection" type="yolo_detector.py" output="screen" respawn="true">
            <param name="input_image_topic" value="$(arg front_camera_topic)" />
            <param name="dnn_confidence_threshold" value="0.5" />
            <param name="enable_output_image_publishing" value="true" />
            <param name="dnn_weights_pkg" value="$(arg dnn_weights_pkg)" />
            <param name="resize_input_to" value="$(arg resize_input_to)" />
        </node>
        <node name="yolo_image" pkg="image_view" type="image_view" output="screen" respawn="true">
            <remap from="image" to="yolo_detector/image" />
        </node>
        <node name="simulation_image" pkg="image_view" type="image_view">
            <remap from="image" to="/stereo/camera/left/image_raw" />
            <param name="autosize" value="true" />
        </node>
        <node name="simulation_record" pkg="image_view" type="video_recorder" respawn="true">
            <param name="filename" value="/home/vladushked/Videos/video.mp4" />
            <remap from="image" to="/stereo/camera/left/image_raw" />
        </node>
    </group>

    <group if="$(arg file)">
        <!-- launch video stream -->
        <include file="$(find video_stream_opencv)/launch/camera.launch">
            <!-- node name and ros graph name -->
            <arg name="camera_name" value="videofile" />
            <!-- means video device 0, /dev/video0 -->
            <arg name="video_stream_provider" value="$(arg videofile_path)" />
            <!-- set camera fps to (if the device allows) -->
            <arg name="set_camera_fps" value="$(arg fps)" />
            <!-- set buffer queue size of frame capturing to -->
            <arg name="buffer_queue_size" value="100" />
            <!-- throttling the querying of frames to -->
            <arg name="fps" value="$(arg fps)" />
            <!-- setting frame_id -->
            <arg name="frame_id" value="image" />
            <!-- visualize on an image_view window the stream generated -->
            <arg name="visualize" value="false" />
        </include>

        <!-- Object detector node -->
        <!-- output objects topic *node_name*/objects -->
        <!-- output image topic *node_name*/image -->
        <node name="yolo_detector" pkg="object_detection" type="yolo_detector.py" output="screen" respawn="true">
            <param name="input_image_topic" value="/videofile/image_raw" />
            <param name="dnn_confidence_threshold" value="0.5" />
            <param name="enable_output_image_publishing" value="true" />
            <param name="dnn_weights_pkg" value="$(arg dnn_weights_pkg)" />
            <param name="resize_input_to" value="$(arg resize_input_to)" />
        </node>
        <node name="yolo_image" pkg="image_view" type="image_view" output="screen" respawn="true">
            <remap from="image" to="yolo_detector/image" />
        </node>
    </group>

    <group if="$(arg cameras)">
        <!-- Front camera interface node -->
        <node name="front_camera" pkg="usb_cam" type="usb_cam_node" output="screen" respawn="true">
            <param name="video_device" value="$(arg device_front)" />
            <param name="image_width" value="640" />
            <param name="image_height" value="480" />
            <param name="pixel_format" value="yuyv" />
            <param name="framerate" value="$(arg fps)" />
            <param name="camera_name" value="front_camera" />
            <param name="io_method" value="mmap" />
        </node>

        <!-- Bottom camera interface node -->
        <node name="bottom_camera" pkg="usb_cam" type="usb_cam_node" output="screen" respawn="true">
            <param name="video_device" value="$(arg device_bottom)" />
            <param name="image_width" value="640" />
            <param name="image_height" value="480" />
            <param name="pixel_format" value="yuyv" />
            <param name="framerate" value="$(arg fps)" />
            <param name="camera_name" value="bottom_camera" />
            <param name="io_method" value="mmap" />
        </node>

        <!-- Object detector node -->
        <!-- output objects topic *node_name*/objects -->
        <!-- output image topic *node_name*/image -->
        <node name="yolo_detector" pkg="object_detection" type="yolo_detector.py" output="screen" respawn="true">
            <param name="input_image_topic" value="/front_camera/image_raw" />
            <param name="dnn_confidence_threshold" value="0.5" />
            <param name="enable_output_image_publishing" value="true" />
            <param name="package_name_with_net" value="sauvc_vision" />
        </node>
    </group>

    <group if="$(arg record)">
        <!-- Video recorder node -->
        <node name="video_recorder" pkg="stingray_utils" type="video_recorder.py" output="screen" respawn="true">
            <param name="source_topic" value="/object_detector/image" />
            <param name="output_width" value="640" />
            <param name="output_height" value="480" />
            <param name="output_fps" value="$(arg fps)" />
            <param name="output_format" value="h264" />
            <param name="record_dir" value="$(env HOME)/stingray_video_records/" />
        </node>
    </group>

    <group if="$(arg stream)">
        <!-- Video web server -->
        <!-- Stream will be available at http://<hostname>:8080/stream_viewer?topic=<image topic> -->
        <!-- For direct images from camera the topic is /<camera_name>/image_raw -->
        <node name="video_server" pkg="web_video_server" type="web_video_server" output="screen" respawn="true">
            <param name="server_threads" value="4" />
            <param name="ros_threads" value="10" />
        </node>
    </group>

</launch>